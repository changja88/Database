
02 - 장애와 회복


- 장애의 유형
    - 트랜잭션 장애
        - 의미 : 트랜잭션 수행 중 오류가 발생하여 정상적으로 수행을 계속할 수 없는 상태
        - 원인 : 트랜잭션의 논리적 오류, 잘못된 데이터 입력, 시스템 자원의 과다 사용 요구, 처리 대상 데이터의 부재
    - 시스템 장애
        - 의미 : 하드웨어의 결함으로 정상적으로 수을 계속할 수 없는 상태
        - 원인 : 하드웨어 이상으로 메인 메모리에 저장된 정보가 소실되거나 교착 상태가 발생한 경우 등
    - 미디어 장애
        - 의미 : 디스크 장치의 결함으로 디스크에 저장된 데이터베이스의 일부 혹은 전체가 손상된 상태
        - 원인 : 디시크 헤드의 손상이나 고장 등


- 데이터베이스의 저장 연산
    - 데이터베이스는 기본적으로 저장 장치에 저장된다.
    - 저장 장치는 장애가 발생했을 때 대응하는 방법이 때라 세 종류로 구분 할 수 있다
        - 휘발성 저장 장치
            - 의미 : 장애가 발생하면 저장된 데이터가 소실됨
            - 예 : 메인 메모리 등
        - 비휘발성 저장 장치
            - 의미 : 장애가 발생해도 저장된 데이터가 소실되지 않음. 단 디스크 헤더 손상같은 저장 장치
                    자체에 이상이 발생하면 데이터가 소실될 수 있음
            - 예 : 디스키, 자기테이프, CD
        - 안정 저장 장치
            - 의미 : 비휘발설 저장 장치를 이용해 데이ㅓ 복사본 여러 개를 만드는 방법으로, 어떤 장애가 발생해도
                    데이터가 손실되지 않고 데이터를 영구적으로 저장 할 수 있음

    - 일반적으로 데이터베이스는 비휠발성 저장 장치인 디스크에 상주한다
      하지만 트랜잭션이 데이터베이스의 데이터를 처리하려면, 데이터를 디스크에서 메인 메모리에 올리고, 처리하고, 돌려 놓는다
    - 디스크와 메인 메모리 간의 데이터 이동읜 대개 블록 단위로 수행된다
        - 디스크에 있는 블록을 디스크 블럭이라고 하고, 메인 메모리에 있는 블록을 버퍼 블록이라고 한다
        - input : 디스크 블록에 저장되어 있는 데이터를 메인 메모리 버퍼 블록으로 이동 시키는 연산
        - ouput : 메인 메모리 블록에 있는 데이터를 디스크 블록으로 이동시키는 연산
    - 응용프로그램이 트랜잭션의 수행을 지시하면 메인 메모리 버퍼 블록에 있는 데이터를 프로그램의 변수로 가져오고,
      데이터 처리 결과를 저장한 변수 값을 메인 메모리 버퍼 블록으로 옮기는 작업이 추가로 필요하다
        - read : 메인 메모리 버퍼 블록에 저장되어 있는 데이터를 프로그램 변수로 읽어오는 연산
        - write : 프로그램의 변수 값을 메인 메모리 버퍼 블록에 있는 데이터에 기록하는 연산

- 회복 기법
    - 장애가 발생하기 전의 모순이 없고 일관된 상태로 복구시키는 것으로, 데이터베이스 관리 시스템에 있는
      회복 관리자(recovery manager)가 담당 한다
    - 회복 관리자는 장애 발생을 탐지하고, 장애가 탐지되면 데이터베이스 복구 기능을 제공한다

    - 회복을 위한 연산
        - 데이터베이스의 회복의 핵심원리는 데이터 중복이다. 데이터를 별도의 장소에 미리 복사해두고,
          복사본을 이용해 원래의 상태로 복원하는 것이다
        - 덤프또는 로그 방법을 사용해 데이터를 복사해두었다가 회복시킬 때 복사본을 사용한다
            - 덤프 : 데이터베이스 전체를 다른 저장 장치에 주기적으로 복사하는 방법
            - 로그 : 데이터베이스에서 변경 연산이 실행될 때마다 데이터를 변경하기 이전 값과
                    변경한 이후 값을 별도의 파일에 기록하는 방법

        - 장애가 발생했을 때, 덤프나 로그 방법으로 중복 저장한 데이터를 이용해 데이터베이스를 복구하는 가장
          기본적인 방법은 redo나 undo 연산을 실행하는 것이다
            - redo(재실행) : 가장 최근에 저장한 데이터베이스 복사본을 가져온 후 로그를 이용해 복사본이 만들어진 이후에
                           실행된 모든 변경 연산을 재실행하여 장애가 발생하기 직전의 데이터베이스 상태로 복구
                           (전반적으로 손상된 경우에 주로 사용 한다)
            - undo(취소) : 로그를 이용해 지금까지 실행된 모든 변경 연산을 취소하여 데이터베이스를 원래의 상태로 복구
                          (변경 중이었거나 이미 변경된 내용만 신뢰성을 잃은 경우에 주로 사용)

    - 로그 회복 기법
        - 즉시 갱신 회복 기법
            - 트랜잭션을 수행 중에 데이터를 변경한 연산의 결과를 데이터베이스에 즉시 반영한다
              그리고 장애 발생에 대비하기 위해 데이터 변경에 대한 내용을 로그 파일에도 기록한다
              (트랙잭션 연산 수행 -> 로그 레코드를 기록 -> 데이터베이스에 반영)
            - 로그를 봐서 commit이 있으면 redo 연산 없으면 undo 연산

    - 자연 갱신 회복 기법
        - 트랜잭션이 수행되는 동안에는 데이터 변경 연산의 결과를 데이터 베이스에 즉시 반영하지 않고
          로그 파일에만 기록해두었다가, 트랜잭션이 부분 완료된 이후에 로그에 기록된 내용을 데이터베이스에 한번에 반영한다
        - 장애가 발생하면 로그파일을 버리고 다시 실행 하면 된다
        - redo연산만 필요하기 떄문에 로그 레코드에 변경 이전 값을 기록할 필요가 없다

    - 검사 시점 회복 기법
        - 로그 전체를 대상으로 회복 기법을 적용하면 데이터베이스 회복에 너무 많은 시간이 걸리고 redo 연산을 수행할
          필요가 없는 트랜잭션에도 redodㅕㄴ산을 실행하는 일이 발생하기도 한다
          이러한 비효율성을 해결하기 위해 제안된 방법이다 검사 시점 회복 기법이다
        - 로그 회복 기법과 같은 방법으로 로그 기록을 이용하되, 일정 시간 간격으로 검사 시점을 만들어 준다
          그리고 장애가 발생하면 가장 최근 검사 시점 이전의 트랜잭션에는 회복 작업을 수행하지 않는다
        - 일정 시간 간격으로 검사 시점이 되면 메인 메모리에 있는 모든 로그 레코드를 안정 저장 장치에 있는
          로그 파일에 기록하고, 트랜잭션의 데이터 변경 내용을 데이터베이스에 반영한다
          그다음 checkpoint으로 검사 시점을 표시한다


