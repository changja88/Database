


03 - 병행 제어


- 병행 수행과 병행 제어
    - 데이터베이스 관리 시스템은 여러 사용자가 데이터베이스를 동시에 공유할 수 있도록 여러개의 트랜잭션이 동시에 수행되는
      병행 수행을 지원 한다
    - 병행 수행은 실제로 여러 트랜잭션이 차례로 번걸아 수행되는 인터리빙(interleaving)방식으로 진행된다

- 병행 수행의 문제
    - 갱신 분실
        - 갱싱 분실은 하나의 트랜잭션이 수행한 데이터 변경 연산의 결과를 다른 트랜잭션이 덮어써 변경 연산이 무효화 되는 것것
    - 모순성
        - 하나의 트랜잭션에 여러 개의 데이터 변경 연산을 실행할 떄 일관성 없는 상태의 데이터베이스에서 데이터를 가져와 연산을
          실행함으로써 모순된 결과가 발생하는 것
    - 연쇄 복귀
        - 트랜잭션이 완료되기 전에 장애가 발생하여 rollback연산을 수행하면, 이 트랜잭션이 장애가 발생 전에 변경한 데이터를
          가져가 변경 연산을 실행한 또 다른 트랜잭션에도 rollback연산을 연쇄적으로 실행해야 한다는데, 이미 완료가 되서
          rollback을 할 수 없는 것

- 트랙잭션 스케쥴
    - 트랜잭션에 포함되어 있는 연산들의 수행 순서를 의미

    - 직렬 스케쥴
        - 인터리빙 방식을 이용하지 않고 각 트랜잭션별로 연산들을 순차적으로 실행시키는 것
        - 모든 트랜잭션이 완료될 때까지 다른 트랜잭션의 방해를 받지 않고 독립적으로 수행된다
        - 때문에 항상 모순이 없는 정확한 결과를 얻는다

    - 비직렬 스케쥴
        - 인터리빙 방식을 이용하여 트랜잭션들을 병행해서 수행시키는 것
        - 돌아가면서 연산들을 실행하기 때문에 하나의 트랜잭션이 완료되기 전에 다른 트랜잭션의 연산이 실행될 수 있다
        - 문제가 발생할 수 있기 때문에 결과의 정확성을 보장할 수 없다
        - 따라서 어떤 비직렬 스케쥴을 선택하냐가 중요하다

    - 직렬 가능 케쥴
        - 직렬 스케쥴과 같은 정확한 결과를 생성하는 비직렬 스케쥴
        - 직렬 스케줄에 따라 수행한 것과 같이 정확한 결과를 생성하는 비직렬 스케쥴
        - 비직렬 스케쥴중에서 직렬 스케쥴과 동일하게 결과값을 보장할 수 있는 스케쥴
        - 하지만, 이걸 찾는게 너무 복잡하고 오래 걸리기때문에 사용 하지 않는다(병행 제어 기법을 대신 사용한다)


- 병행 제어 기법
    - 여러 트래잭션을 병행 수행하면서도 정확한 결과를 얻을 수 있는 직렬 가능성을 보장받기 위해 사용된다
    - 모든 트랜잭션이 따르면 직렬 가능성이 보장되는 나름의 규약을 정의하고, 트랜잭션들이 이 규약을 따르도록 하는 것

    - 로킹 기법의개념
        - 병행 수행되는 트랜잭션들이 동일한 데이터에 동시에 접근하지 못하도록 lock과 unlock이라는 2개의 연산을
          이용해 제어 한다
        - 상호 배제 하여 직렬 가능성을 보장한다
        - lock연산은 크게는 전체 데이터를 대상으로 실행 할 수도 있다
        - 즉, 로킹 단위가 커질수록 병행성은 낮아지고 제어가 쉬워진다
        - 공용 락(Shared lock)
            - 다른 트랜잭션이 read는 할수 있지만 write는 할 수 없다
            - 해당 데이터에 다른 트랜잭션도 공용락을 동시에 실행 할 수 있다(데이터 사용권을 여러 트랜잭션이 가질수 있다)
        - 전용 락(exclusive lock)
            - 다른 트랜잭션은 read, lock 모두 할수 없다
            - 전용락을 실행한 트랜잭션만 해당 데이터에 대한 독점권을 가질 수 있다
        - 로킹 규약만으로 트랜잭션 스케쥴의 직렬 가능성을 완벽하게 보장할 수 없다

    - 2단계 로킹 규약
        - 기본 로킹 규약의 문제를 해결하고 트랜잭션의 직렬 가능성을 보장하기 위해서 추가된 규약 -> 직렬 가능성 보장
        - 모든 트랜잭션이 lock과 unlock연산을 다음과 같이 2단계로 나누어 실행해야 한다
            - 확장 단계 : 트랜잭션이 lock연산만 실행할 수 있고, unlock연산은 실행 할 수 없는 단계
            - 축소 단계 : 트랜잭션이 unlock연산만 실행 할 수 있고, lock연산은 실행할 수 없는 단계
        - 트랜잭션이 처음에 수행되면 확장 단계로 들어가 lock연산만 실행 할 수 있다
          그러다가 unlock 연산을 실행하면 축소 단계로 들어가 그때부터는 unlock연산만 실행 할 수 이싿
        - 즉, 필요한 부분에 lock을 싹다 걸고 연산을 마치면 하나씩 unlock을 실행 해야 한다는 뜻



