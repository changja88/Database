

03 - SQL을 이용한 데이터 조작



SQL을 이용한 데이터 조작
- 데이터 검색 -> SELECT
- 데이터 삽입 -> INSERT
- 데이터 수정 -> UPDATE
- 데이터 삭제 -> DELETE

데이터 검색
- 기본 검색
    - SELECT [ALL | DISTINCT] 속성_리스트 FROM 테이블_리스트
    - 검색하고 싶은 속성의 이름은 콤마로 구분한다
    - 모든 속성을 검색하기 위해 속성의 이름을 전부 나열하지 않고 * 를 사용할수도 있다
    - 테이블에서 튜플의 중복을 제거하고 한 번씩만 출력되도록 하려면 DISTINCT 키워드를 사용한다
        - SELECT DISTINCT 제조업체 FROM TABLE
    - 결과 테이블에 출력되는 속성의 이름을 다른 이름으로 바꾸어 출력할 수도 있다
        - SELECT 제품명, 단가 AS 가격 FROM 제품
    - 산술식을 이용한 검색
        - SELECT 제품명, 단가 + 500 AS "조정 단가" FROM 제품
    - 조건 검색
        - SELECT [ALL | DISTINCT] FROM 테이블_리스트 [WHERE 조건];
    - LIKE를 이용한 검색
        - 검색 조건을 부분적으로만 알고 있다면 LIKE 키워드를 이용해 검색할 수 있다
        - % : 0개 이상의 문자 (문자의 내용과 개수는 상관 없음)
        - _ : 1개의 문자(문자의 내용은 상관 없음)
    - 정렬 검색
        - 일반적으로 SELECT문의 검색 결과 테이블은 DMS가 정한 순서로 출력된다
        - SELECT [ALL | DISTINCT] 속성_리스트 FROM 테이블_리스트 [WHERE] 조건 [ORDER BY 속성_리스트 [ASC|DESC];
    - 집계 함수를 이용한 검색
        - 모든 데이터 -> COUNT, MAX, MIN
        - 숫자 데이터 -> SUM. AVG
        - 집계 함수는 널인 속성 값은 제외하고 계산한다
        - 집계 함수는 WHERE절에서는 사용할 수 없고 SELECT 절이나 HAVING 절에서만 사용할 수 있다
        - SELECT AVG(단가) FROM 제품
        - 결과 테이블을 보면 속성의 이름이 별도로 지정되어 있지않다(집계 함수의 결과가 테이블에 원래 있던 내용이 아니기때문)
          따라서, 집계 함수를 이용해 계산된 결과 값을 출력할 떄는 AS키워드를 사용해 새 이름을 부여해주는 것이 좋다
        - DISTINCT 키워드를 사용해 특정 속성 값의 중복을 없애고 집계 함수를 적용할 수 있다
            - SELECT COUNT(DISTINCT 제조업체) AS "제조업체 수" FROM 제
    - 그룹별 검색
        - 테이블에서 특정 속성의 값이 같은 튜플을 모아 그룹을 만드록, 그룹벼로 검색을 하기 위해서 GROUP BY 키워드를 사용한다
        - 그룹에 대한 조건을 추가하려면 GROUP BY키워드를 HAVING키워드와 함께 사용하면 된다
        - GROUP BY키워드가 없는 SELECT문은 테이블 전체를 하느이 그룹으로 보고 검색하는 것이다
        - ~ [WHERE 조건] [GROUP BY 속성_리스트 [HAVING 조건]] [ORDER BT 속성_리스트 [ASC|DESC]];
        - SELCET 주문 제품, SUM(수량) AS 총주문 수량 FROM 주문 GROUP BY 주문제품;
    - 여러 테이블에 대한 조인 검색
        - 조인 검색을 하려면 테이블을 연결해주는 속성이 필요하고 이 속성을 조인 속성이라고 한다
        - 테이블을 연결하려면, 조인 속성의 이름은 달라도 되지만 도메인은 반드시 같아야 한다
        - 일반적으로 테이블의 관계를 나타내는 외래키를 조인 속성으로 이용한다
        - SELECT 제품.제품명 FROM 제품, 주문 WHERE 주문.주문고객 = 'banana' AND 제품.제품번호 = 주문.주문제품;
    - 부속 질의문을 이용한 검색
        - SELCET문 안에 또 다른 SELECT 문을 포함 할 수 있다(nexted select라고 한다)
        - 부속질의문을 먼저 수행하고, 그 결과를 이용해 상위 질의문을 수행하여 최종 결과 테이블을 반환한다
        - SELECT 제품명, 단가 FROM 제품 WHERE 제조업체 = (SELECT 제조 업체 FROM 제품 WHERE 제품명='하늘비스킷')
        - 부속 질의문이 단행이냐 다중행이냐에 따라서 메인 질의문에서 사용할수 있는 연산자가 다르다
            - 단행은 다 사용할 수 있다(비교연산자 포함)
            - IN, NOT IN, EXISTS, NO EXISTS, ALL, ANY, SOME -> 다중행연산자를 대상으로 메인 질의문에서 사용가능
            - SELECT 제품명, 단가, 제조업체 FROM 제품
              WHERE 단가 > ALL(SELECT 단가 FROM 제조업체 WHERE 제조업체='대한 식품')

데이터 삽입
    - 테이블에 튜플을 직접 삽입하는 INSERT문의 기본 형식은 다음과 같다
    - INSERT INTO 테이블 이름[(속성_리스트)] VALUES (속성값_리스트)
    - 부속 질의문을 이용한 데이터 삽입
        - INSERT INTO 테이블_이름[(속성_리스트)] SELECT 문;
        - INSERT INTO 한빛제품(제품명, 재고량, 단가) SELECT 제품명, 재고량, 단가 FROM 제품 WHERE 제조업체='한빛제과'

데이터 수정
    - UPDATE 테이블_이름 SET 속성_이름= 값1, 속성_이름=값2, ... [WHERE 조건]
    - WHERE 절을 생략하면 테이블에 존재하는 모든 튜플을 대상으로 수정한다

데이터 삭제
    - DELETE FROM 테이블_이름 [WHERE 조건]
    - WHERE 절을 생략하면 테이블에 존재하는 모든 튜플을 삭제하여 빈 테이블이 된다




